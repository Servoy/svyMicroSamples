<?xml version="1.0"?>

<!-- Works with Ant 1.7.0 and higher -->
<!-- These are useful combined with command line/ant test runners for mobile/smart client solutions exports; -->
<!-- see Servoy Wiki - Building A Software Factory for how to use test runners with ant on these exports -->
<!--<project name="Ant Solution Exporter" default="copy_fonts_dir" basedir=".">-->
<project name="Ant Solution Exporter" default="ALL" basedir=".">

    <property environment="env"/>
    <property name="WORKSPACE" value="${env.WORKSPACE}"/>
    <property file="build.properties"/>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ANT_CONTRIB_JAR}"/>
        </classpath>
    </taskdef>

    <import file="shared_utils.xml" />
    <import file="servoy_utils.xml" />
    <import file="code_coverage.xml" />
    <import file="code_analyis.xml" />
    <import file="tomcat_utils.xml" />

    <target name="ALL" depends="1-SetupEnvironment, 2-SetupCodecoverage, 3-RunJSUnitTest, 4-ExportDeployWarFile, 5-GenerateReports, 6-StoreData" />


    <target name="1-SetupEnvironment">
        <echo level="info" message="*** Setting up folders and files for build***" />
        <move-folder fromDir="${WORKSPACE}/resources" toDir="${WORKSPACE}/tempJenkinsResource" />
        <delete includeEmptyDirs="true">
            <fileset dir="${WORKSPACE}">
                <include name="**/resources/"/>
            </fileset>
        </delete>
        <move-folder fromDir="${WORKSPACE}/tempJenkinsResource" toDir="${WORKSPACE}/resources" />

        <make-clean-dir dir="${TOOLS-DIR}" />
        <make-clean-dir dir="${OUTPUT.DIR}" />
        <make-clean-dir dir="${LOG.DIR}" />
        <make-clean-dir dir="${OUTPUT.DIR.TEST.EXPORTS}" />
        <make-clean-dir dir="${ARTIFACTS.DIR}" />

        <script language="javascript"><![CDATA[
            var testSolution = project.getProperty('SERVOY.TEST-SOLUTION');

            if (testSolution.slice(-5) === '_test') {
                project.setProperty('SERVOY.SOLUTION_UNDER_TESTING', testSolution.slice(0,-5));
            } else {
                project.setProperty('SERVOY.SOLUTION_UNDER_TESTING', testSolution);
            }
        ]]></script>
    </target>

    <target name="2-SetupCodecoverage">
        <if>
            <not>
                <equals arg1="${CODE.COVERAGE.ENABLED}" arg2="true" />
            </not>
            <then>
                <echo level="info" message="*** Code Coverage Reporting disabled (Skip step) ***" />
            </then>
            <else>
                <echo level="info" message="*** Setting up folders for Code Coverage ***" />
                <antcall target="code_coverage_reporting_preparation" />
                <antcall target="code_coverage_instrument_workspace" />
                <antcall target="code_coverage_fix_instrumented_workspace_for_servoy" />
            </else>
        </if>
    </target>

    <target name="3-RunJSUnitTest" depends="get_equinox_jar, prepare_classpath">
        <if>
            <not>
                <equals arg1="${SERVOY.JUNIT.ENABLED}" arg2="true" />
            </not>
            <then>
               <echo level="info" message="*** Servoy JSUnit Test disabled (Skip step) ***" />
            </then>
            <else>
                <setup-servoy-properties dbName="${DB.NAME}" dbServerUrl="${DB.URL}" dbServerPort="${DB.PORT}" dbServerUsername="${DB.USERNAME}" dbServerPassword="${DB.PASSWORD}"/>
                <export-solution-as-dot-servoy solutionNames="${SERVOY.TEST-SOLUTION}"/>
                <run_servoy_jsunit_tests/>
           </else>
       </if>
    </target>

    <target name="4-ExportDeployWarFile" depends="get_equinox_jar" unless="test.failed">
        <setup-servoy-properties dbName="${DB.NAME}" dbServerUrl="${DB.URL}" dbServerPort="${DB.PORT}" dbServerUsername="${DB.USERNAME}" dbServerPassword="${DB.PASSWORD}"/>
        <export-solution-as-war solutionNames="${SERVOY.SOLUTION}" workspace="${WORKSPACE}" warFileName="${WAR-FILE.NAME}"/>
        <if>
            <not>
                <isset property="export.failed"/>
            </not>
            <then>
                <antcall target="deploy-war-on-tomcat-server"/>
            </then>
        </if>
    </target>

    <target name="5-GenerateReports">
        <if>
            <equals arg1="${CODE.COVERAGE.ENABLED}" arg2="true" />
            <then>
                <if>
                    <not>
                        <isset property="test.failed"/>
                    </not>
                    <then>
                        <antcall target="generate_code_coverage_reports"/>
                        <antcall target="generate_code_analysis_reports"/>
                    </then>
               </if>
           </then>
        </if>
    </target>

    <target name="6-StoreData">
        <!-- Move the collected logs to the folder for the specific Jenkins build as artifacts -->
        <move todir="${ARTIFACTS.DIR}" failonerror="false">
            <fileset dir="${LOG.DIR}" includes="*.*" />
        </move>

        <!-- Move .servoy JSUnit test to archive folder -->
        <move todir="${ARTIFACTS.DIR}" failonerror="false">
            <fileset dir="${OUTPUT.DIR.TEST.EXPORTS}" includes="*.servoy" />
        </move>

        <!-- Move war file to archive folder -->
        <move todir="${ARTIFACTS.DIR}" failonerror="false">
            <fileset dir="${OUTPUT.DIR}" includes="*.war" />
        </move>

        <fail-if-export-failed />
        <fail-if-unittests-failed />
    </target>

</project>
