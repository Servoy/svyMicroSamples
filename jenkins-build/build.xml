<?xml version="1.0"?>

<!-- Works with Ant 1.7.0 and higher -->
<!-- These are useful combined with command line/ant test runners for mobile/smart client solutions exports; -->
<!-- see Servoy Wiki - Building A Software Factory for how to use test runners with ant on these exports -->
<!--<project name="Ant Solution Exporter" default="copy_fonts_dir" basedir=".">-->
<project name="Ant Solution Exporter" default="ALL" basedir=".">

    <property environment="env"/>
    <property name="WORKSPACE" value="${env.WORKSPACE}"/>
    
    <!-- Init set result properties -->
    <property name="TEST.FAILED" value="false" />
    <property name="E2E.FAILED" value="false" />
    <property name="EXPORT.FAILED" value="false" />
    <property file="build.properties"/>

    <tstamp>
        <format property="TODAY_TIMEFORMAT" pattern="yyyyMMdd-HHmm"  locale="nl,NL" />
    </tstamp>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties" >
        <classpath>
            <pathelement location="${ANT_CONTRIB_JAR}"/>
        </classpath>
    </taskdef>

    <!-- Fixed workspace path for windows -->
    <propertyregex property="WORKSPACE_FIX" input="${WORKSPACE}" regexp="\\" replace="/" global="true" />

    <import file="shared_utils.xml" />
    <import file="servoy_utils.xml" />
    <import file="code_coverage.xml" />
    <import file="code_analyis.xml" />
    <import file="tomcat_utils.xml" />
    <import file="e2e.xml" />

    <target name="ALL" depends="1-SetupEnvironment, 2-SetupCodecoverage, 3-RunJSUnitTest, 4-RunE2ETests, 5-ExportDeployWarFile, 6-GenerateReports, 7-StoreData" />


    <target name="1-SetupEnvironment">
        <echo level="info" message="*** Setting up folders and files for build***" />
        <move-folder fromDir="${WORKSPACE}/resources" toDir="${WORKSPACE}/tempJenkinsResource" />
        <delete includeEmptyDirs="true">
            <fileset dir="${WORKSPACE}">
                <include name="**/resources/"/>
            </fileset>
        </delete>
        <move-folder fromDir="${WORKSPACE}/tempJenkinsResource" toDir="${WORKSPACE}/resources" />

        <make-clean-dir dir="${TOOLS-DIR}" />
        <make-clean-dir dir="${OUTPUT.DIR}" />
        <make-clean-dir dir="${LOG.DIR}" />
        <make-clean-dir dir="${OUTPUT.DIR.TEST.EXPORTS}" />
        <make-clean-dir dir="${ARTIFACTS.DIR}" />
        <make-clean-dir dir="${PROTRACTOR.REPORT.DIR}" />

        <script language="javascript"><![CDATA[
            var testSolution = project.getProperty('SERVOY.TEST-SOLUTION');

            if (testSolution.slice(-5) === '_test') {
                project.setProperty('SERVOY.SOLUTION_UNDER_TESTING', testSolution.slice(0,-5));
            } else {
                project.setProperty('SERVOY.SOLUTION_UNDER_TESTING', testSolution);
            }
        ]]></script>

        <exec executable="node" outputproperty="unmergedChanged" failonerror="true" append="true">
                <arg value="${LIB-DIR}/pendingSourceMerges.js" />
                <arg value="${WORKSPACE_FIX}" />
        </exec>
        <condition property="unmergedfiles.found">
                <matches pattern="FOUND*" string="${unmergedChanged}"/>
        </condition>
        <fail message="${unmergedChanged}" if="unmergedfiles.found" />
    </target>

    <target name="2-SetupCodecoverage">
        <if>
            <isfalse value="${CODE.COVERAGE.ENABLED}"/>
            <then>
                <echo level="info" message="*** Code Coverage Reporting disabled (Skip step) ***" />
            </then>
            <else>
                <echo level="info" message="*** Setting up folders for Code Coverage ***" />
                <antcall target="code_coverage_reporting_preparation" />
                <antcall target="code_coverage_instrument_workspace" />
                <antcall target="code_coverage_fix_instrumented_workspace_for_servoy" />
            </else>
        </if>
    </target>

    <target name="3-RunJSUnitTest" depends="get_equinox_jar, prepare_classpath">
        <if>
            <isfalse value="${SERVOY.JUNIT.ENABLED}"/>
            <then>
               <echo level="info" message="*** Servoy JSUnit Test disabled (Skip step) ***" />
            </then>
            <else>
                <setup-servoy-properties dbName="${DB.NAME}" dbServerUrl="${DB.URL}" dbServerPort="${DB.PORT}" dbServerUsername="${DB.USERNAME}" dbServerPassword="${DB.PASSWORD}"/>
                <if>
                    <istrue value="${CODE.COVERAGE.ENABLED}"/>
                    <then>
                        <!--<export-solution-as-dot-servoy workspace="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}" solutionNames="${SERVOY.TEST-SOLUTION}"/>-->
                        <export-solution-as-dot-servoy solutionNames="${SERVOY.TEST-SOLUTION}"/>
                    </then>
                    <else>
                        <export-solution-as-dot-servoy solutionNames="${SERVOY.TEST-SOLUTION}"/>
                    </else>
                </if>
                
                <run_servoy_jsunit_tests/>
           </else>
       </if>
    </target>

    <target name="4-RunE2ETests" depends="get_equinox_jar">
        <if>
            <and>
                <isfalse value="${TEST.FAILED}" />
                <istrue value="${E2E.ENABLED}" />
            </and>
            <then>
                <setup-servoy-properties dbName="${DB.NAME}" dbServerUrl="${DB.URL}" dbServerPort="${DB.PORT}" dbServerUsername="${DB.USERNAME}" dbServerPassword="${DB.PASSWORD}"/>
                <export-solution-as-war solutionNames="${SERVOY.SOLUTION}" workspace="${WORKSPACE}" warFileName="${PROTRACTOR.E2E.WAR-FILE.NAME}"/>
                <deploy-war-on-tomcat-server applicationName="${PROTRACTOR.E2E.WAR-FILE.NAME}" warFile="${PROTRACTOR.E2E.WAR-FILE}"/>
                <antcall target="run_e2e_tests" />
                <undeploy-war-on-tomcat-server applicationName="${PROTRACTOR.E2E.WAR-FILE.NAME}" warFile="${PROTRACTOR.E2E.WAR-FILE}"/>
            </then>
            <else>
                <echo level="info" message="*** E2E Test disabled (Skip step) ***" />
            </else>
        </if>
    </target>

    <target name="5-ExportDeployWarFile" depends="get_equinox_jar">
        <if>
            <and>
                <isfalse value="${TEST.FAILED}" />
                <isfalse value="${E2E.FAILED}"/>
            </and>
            <then>
                <setup-servoy-properties dbName="${DB.NAME}" dbServerUrl="${DB.URL}" dbServerPort="${DB.PORT}" dbServerUsername="${DB.USERNAME}" dbServerPassword="${DB.PASSWORD}"/>
                <export-solution-as-war solutionNames="${SERVOY.SOLUTION}" workspace="${WORKSPACE}" warFileName="${WAR-FILE.NAME}"/>
                <if>
                    <and>
                        <isfalse value="${EXPORT.FAILED}" />
                        <istrue value="${TOMCAT.WAR_DEPLOY.ENABLED}" />
                    </and>
                    <then>
                        <deploy-war-on-tomcat-server />
                    </then>
                </if>
            </then>
        </if>
    </target>

    <target name="6-GenerateReports">
        <if>
            <and>
                <istrue value="${CODE.COVERAGE.ENABLED}" />
                <isfalse value="${TEST.FAILED}"/>
            </and>
            <then>
                <antcall target="generate_code_coverage_reports"/>
           </then>
        </if>
        
        <if>
            <and>
                <istrue value="${CODE.ANALYSIS.ENABLED}"/>
                <isfalse value="${TEST.FAILED}"/>
            </and>
            <then>
                <antcall target="generate_code_analysis_reports"/>
           </then>
        </if>
    </target>

    <target name="7-StoreData">
        <!-- Move the collected logs to the folder for the specific Jenkins build as artifacts -->
        <move todir="${ARTIFACTS.DIR}" failonerror="false">
            <fileset dir="${LOG.DIR}" includes="*.*" />
        </move>

        <!-- Move .servoy JSUnit test to archive folder -->
        <move todir="${ARTIFACTS.DIR}" failonerror="false">
            <fileset dir="${OUTPUT.DIR.TEST.EXPORTS}" includes="*.servoy" />
        </move>

        <!-- Move war file to archive folder -->
        <move todir="${ARTIFACTS.DIR}" failonerror="false">
            <fileset dir="${OUTPUT.DIR}" includes="*.war" />
        </move>

        <fail-if-e2e-failed />
        <fail-if-export-failed />
        <fail-if-unittests-failed />
    </target>

</project>
