<?xml version="1.0"?>

<!-- Works with Ant 1.7.0 and higher -->
<project basedir=".">
    <macrodef name="export-solution-as-dot-servoy">
         <attribute name="solutionNames"/>
         <attribute name="failOnError" default="true"/>
         <attribute name="outputDir" default="${general.test.exports.regular.dir}"/>

         <sequential>
             <!-- now we are ready to start the workspace exporter -->
             <echo level="verbose" message="Using equinox launcher jar: ${equinox.launcher.jar.location_property}" />
             <delete failonerror="false" file="${WORKSPACE}/.metadata/.log" />

             <var name="export.result" unset="true"/>
             <echo level="info" message="Exporting @{solutionNames} from workspace ${WORKSPACE}"/>
             <java   classname="org.eclipse.equinox.launcher.Main"
                     classpathref="equinox.launcher.jar.location"
                     failonerror="#{failOnError}"
                     resultproperty="export.result"
                     fork="true">

                 <jvmarg value="${servoy.exporter.memory.xms}" />
                 <jvmarg value="${servoy.exporter.memory.xmx}" />
                 <jvmarg value="${servoy.exporter.memory.maxpermsize}" />
                 <jvmarg value="-Dosgi.configuration.cascaded=false" />

                 <arg value="-application" />
                 <arg value="com.servoy.eclipse.exporter.solution.application" />

                 <arg value="-data" />
                 <arg value="${WORKSPACE}" />
                 <arg value="-s" />
                 <arg value="@{solutionNames}" />
                 <arg value="-o" />
                 <arg value="@{outputDir}" />
                 <arg value="-as" />
                 <arg value="${servoy.app_server.dir}" />
                 <arg value="-p" />
                 <arg value="${servoy.servoy_properties}" />

                 <!-- add here any of the optional arguments supported by the exporter; see 'export -help' for more info; for example: -->
                 <!--arg value="-help" /-->
                 <arg value="-verbose" />
                 <arg value="${export.dash.pl.if_needed}" />
                 <arg value="-sw" />
                 <arg value="-pl" />
                 <arg value="-dbd" />
                 <arg value="-dbi" />
                 <arg value="-md ws" />
                 <arg value="-i18n" />
                 <arg value="-users" />
                 <arg value="-tables" />
                 <arg value="-modules" />
             </java>
             <condition property="export.failed">
                 <not>
                     <equals arg1="${export.result}" arg2="0"/>
                 </not>
             </condition>
         </sequential>
     </macrodef>

    <macrodef name="export-solution-as-war">
        <attribute name="solutionNames"/>
    	<attribute name="workspace"/>
        <attribute name="outputDir" default="${general.output_dir}"/>
        <attribute name="failOnError" default="false"/>
        <attribute name="warFileName"/>

    	<sequential>
            <echo level="info" message="*** Preparing build directory for export ***"/>
        	<delete failonerror="false" file="@{workspace}/.metadata/.log" />

        	<!-- now we are ready to start the workspace exporter -->
            <echo level="info" message="Using equinox launcher jar: ${equinox.launcher.jar.location_property}" />
			<echo level="info" message="Exporting @{solutionNames} from workspace @{workspace}"/>

            <java   classname="org.eclipse.equinox.launcher.Main"
                    classpathref="equinox.launcher.jar.location"
                    failonerror="@{failOnError}"
                    resultproperty="export.result"
                    fork="true">
                <jvmarg value="${servoy.exporter.memory.xms}" />
                <jvmarg value="${servoy.exporter.memory.xmx}" />
                <jvmarg value="${servoy.exporter.memory.maxpermsize}" />
                <jvmarg value="-Dosgi.configuration.cascaded=false" />
                <jvmarg value="-Dservoy.application_server.dir=${servoy.servoy_install.app_server_dir}" />
                <!--<jvmarg value="-Djava.awt.headless=true" />-->
                <arg value="-application" />
                <arg value="com.servoy.eclipse.exporter.war.application" />

                <arg value="-data" />
                <arg value="@{workspace}" />
                <arg value="-s" />
                <arg value="@{solutionNames}" />
                <arg value="-o" />
                <arg value="@{outputDir}" />
                <arg value="-as" />
                <arg value="${servoy.servoy_install.app_server_dir}" />
                <arg value="-p" />
                <arg value="${servoy.servoy_properties}" />
                <arg value="-warFileName" />
                <arg value="@{warFileName}" />
                <arg value="-antiResourceLocking"/>
                <arg value="-clearReferencesStatic"/>
                <arg value="-allowSQLKeywords" />
                <arg value="-sw" />
                <arg value="-pl" />
                <arg value="-dbd" />
                <arg value="-dbi" />
                <arg value="-md ws" />
                <arg value="-i18n" />
                <arg value="-users" />
                <arg value="-tables" />
                <arg value="-modules" />
                <arg value="-minimize" />
                <arg value="-verbose" />
                <arg value="-defaultAdminUser" />
                <arg value="${servoy.default_admin_user}" />
                <arg value="-defaultAdminPassword" />
                <arg value="${servoy.default_admin_password}" />

            </java>
            <condition property="export.failed">
                <not>
                    <equals arg1="${export.result}" arg2="0"/>
                </not>
            </condition>
        </sequential>
    </macrodef>

    <macrodef name="run_servoy_jsunit_tests">
		<sequential>
			<echo level="info" message="*** Preparing build directory for Unit Tests ***"/>

			<delete includeemptydirs="true" quiet="true">
	            <fileset dir="${general.build.dir}" includes="junit*.properties" />
	        </delete>

			<script language="javascript"><![CDATA[
				//Set internal property for test timeout in milliseconds
				var value = parseInt(project.getProperty('test.timeout.minutes'));
				project.setProperty('test.timeout', value * 60 * 1000);
				//Set internal property for solution load timeout in milliseconds
				value = parseInt(project.getProperty('solution-load.timeout.minutes')||project.getProperty('test.timeout.minutes'))
				project.setProperty('servoy.test.solution-load.timeout', value * 60 * 1000);

				//Record startTime for logging total duration after finishing running the tests
				project.setProperty('servoy.test.start-time', Date.now());
			]]></script>

			<echo level="info" message="*** Running Unit Tests ***"/>

	    	<!-- Define a timeout so we know the test will finish eventually -->
            <junit fork="yes" forkmode="once" timeout="${servoy.test.timeout}" dir="${servoy.servoy_install.app_server_dir}" haltonfailure="false" haltonerror="false" showoutput="true" errorProperty="test.failed" failureProperty="test.failed" printsummary="withOutAndErr">
            	<jvmarg value="${servoy.tester.memory.xms}" />
            	<jvmarg value="${servoy.tester.memory.xmx}" />
            	<jvmarg value="${servoy.tester.memory.maxpermsize}" />
            	<jvmarg value="-Dtest.log.location=${general.log_dir}/test.log" />
                <classpath refid="classpath.run_test" />

                <sysproperty key="servoy.test.target-exports" value="${general.test.exports.regular.dir}" />
                <sysproperty key="servoy.test.property-file" value="${servoy.servoy_properties}" />
            	<sysproperty key="servoy.test.solution-load.timeout" value="${servoy.solution-load.timeout}" />
                <sysproperty key="servoy.test.target-file-ext" value=".servoy" />

                <formatter type="xml" extension=".xm1"/>
                <formatter type="xml" />

                <test name="com.servoy.automation.jsunit.smartclient.ServoyJSUnitTestRunner" todir="${general.junit.result.dir}" />
            </junit>

			<script language="javascript"><![CDATA[
				var start = parseInt(project.getProperty('servoy.test.start-time'))
				var delta = Math.round((Date.now() - start)/1000)

				var seconds = delta % 60
				delta -= seconds
				var minutePart = delta%3600
				delta -= minutePart

				var value = delta ? delta/3600 + ' hours ': '' //hours
				value += (minutePart ? minutePart / 60 : '0') + ' minutes ' //minutes
				value += seconds + ' seconds' //secondsvalue

				project.log("Solution import and Unit Test execution finished in " + value, project.MSG_INFO)
			]]></script>

            <antcall target="create_test_report"/>
           </sequential>
    </macrodef>

    <macrodef name="fail-if-unittests-failed">
        <sequential>
            <fail message="Unit tests failed: please check test reports." if="test.failed" />
        </sequential>
    </macrodef>

    <macrodef name="fail-if-export-failed">
        <sequential>
            <fail message="Exports failed: please check the exporter log files." if="export.failed" />
        </sequential>
    </macrodef>

    <target name="create_test_report">
        <junitreport todir="${general.junit.result.dir}">
            <fileset dir="${general.junit.result.dir}">
                <include name="TEST-*.xml" />
            </fileset>

            <report format="noframes" todir="${general.junit.result.dir}" />
        </junitreport>
    </target>

    <target name="get_equinox_jar">
        <!-- store path to newest Eclipse launcher JAR in path id 'newest.equinox.launcher.path.id' -->
        <!-- and turn the path into a property -->
        <latest_jar pathName="equinox.launcher.jar.location" dir="${servoy.servoy_install.developer}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar"/>
    </target>

    <target name="prepare_classpath">
        <mkdir dir="${LIB-DIR}/jsUnit"/>

        <latest_jar pathName="cse.jsunit.jar.location" dir="${servoy.servoy_install.developer}/plugins" includes="**/com.servoy.eclipse.jsunit_*.jar"/>
        <latest_jar pathName="cse.model.jar.location" dir="${servoy.servoy_install.developer}/plugins" includes="**/com.servoy.eclipse.model_*.jar"/>
        <latest_jar pathName="servoy_debug.jar.location" dir="${servoy.servoy_install.developer}/plugins" includes="**/servoy_debug_*.jar"/>
        <latest_jar pathName="cse.exporter.mobile.location" dir="${servoy.servoy_install.developer}/plugins" includes="**/com.servoy.eclipse.exporter.mobile_*.jar"/>
        <echo level="info" message="Using in importer classpath: ${cse.jsunit.jar.location_property}" />
        <echo level="info" message="Using in importer classpath: ${cse.model.jar.location_property}" />
        <echo level="info" message="Using in importer classpath: ${servoy_debug.jar.location_property}" />
        <echo level="info" message="Using in importer classpath: ${cse.exporter.mobile.location_property}" />

        <unzip src="${cse.jsunit.jar.location_property}" dest="${LIB-DIR}/jsUnit">
            <patternset>
                <include name="jsunit-*.jar"/>
                <include name="j2db_test.jar"/>
            </patternset>
        </unzip>

        <path id="classpath.run_test">
            <fileset dir="${servoy.servoy_install.app_server_dir}/lib">
                <include name="*.jar" />
                <exclude name="slf4j-jdk14.jar"/>
            </fileset>
            <fileset dir="${LIB-DIR}/jsUnit">
                <include name="*.jar" />
            </fileset>
            <fileset file="${cse.jsunit.jar.location_property}"/>
            <fileset file="${cse.model.jar.location_property}"/>
            <fileset file="${servoy_debug.jar.location_property}"/>
            <fileset file="${cse.exporter.mobile.location_property}"/>
            <fileset dir="${servoy.servoy_install.developer}/plugins">
                <include name="org.junit*4*/junit*.jar"/>
            </fileset>
        </path>
    </target>

    <macrodef name="setup-servoy-properties">
        <attribute name="dbName"/>
        <attribute name="dbServerUrl"/>
        <attribute name="dbServerPort" />
        <attribute name="dbServerUsername" />
        <attribute name="dbServerPassword" />
        <sequential>
            <echo level="info" message="Updating servoy.properties with databasename information" />
            <delete file="${servoy.servoy_properties}" />
            <copy file="${servoy.property.template.file}" tofile="${servoy.servoy_properties}" />

            <replace file="${servoy.servoy_properties}" token="##DbServerUrl##" value="@{dbServerUrl}" />
            <replace file="${servoy.servoy_properties}" token="##dbServerPort##" value="@{dbServerPort}" />
            <replace file="${servoy.servoy_properties}" token="##DbName##" value="@{dbName}" />
            <replace file="${servoy.servoy_properties}" token="##dbServerUsername##" value="@{dbServerUsername}" />
            <replace file="${servoy.servoy_properties}" token="##dbServerPassword##" value="@{dbServerPassword}" />

        </sequential>
    </macrodef>


    <macrodef name="latest_jar">
        <attribute name="pathName"/>
        <attribute name="propertyName" default="@{pathName}_property"/>
        <attribute name="dir"/>
        <attribute name="includes"/>
        <sequential>
            <!-- store path to newest JAR -->
            <path id="@{pathName}">
                <first count="1">
                    <sort>
                        <fileset dir="@{dir}" includes="@{includes}" />
                        <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
                            <date />
                        </reverse>
                    </sort>
                </first>
            </path>

            <!-- create a property as well -->
           <property name="@{propertyName}" refid="@{pathName}" />
       </sequential>
    </macrodef>

    <macrodef name="make-clean-dir">
        <attribute name="dir"/>
        <sequential>
            <delete dir="@{dir}" quiet="true"/>
            <mkdir dir="@{dir}"/>
       </sequential>
    </macrodef>
</project>
