<project>
    <!-- Step 1: clean the instrumented workspace -->
    <target name="code_coverage_reporting_preparation" depends="install_istanbul">

            <make-clean-dir dir="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE.TEMP}" />
            <make-clean-dir dir="${CODE.COVERAGE.REPORT.DIR}" />
            <make-clean-dir dir="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}" />
            <copy todir="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}">
                <fileset dir="${WORKSPACE}" />
            </copy>

            <copy todir="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}/${SERVOY.TEST-SOLUTION}">
                <fileset dir="${LIB-DIR}">
                    <include name="scopes.codeCoverageReporting.js" />
                </fileset>
                <globmapper from="scopes.codeCoverageReporting.js" to="codeCoverageReporting.js"/>
            </copy>
            <exec executable="node" dir="${WORKSPACE}" failonerror="true">
                <arg value="${LIB-DIR}/servoyIstanbulInstrumentCleaner.js" />
                <arg value="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}" />
            </exec>
    </target>

    <!-- Step 2: instrument all code from workspace into the temp instrumented workspace-->
    <target name="code_coverage_instrument_workspace">
        <echo level="verbose" message="instrumenting ${SERVOY.SOLUTION_UNDER_TESTING} into ${CODE.COVERAGE.INSTRUMENTED.WORKSPACE.TEMP}"/>
        <exec executable="${OS.COMMAND.EXECUTER}" dir="${WORKSPACE}" failonerror="true">
            <arg value="${OS.COMMAND.CALL}" />
            <arg value="istanbul instrument" />
            <arg value="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}"/>
            <arg line="--output"/>
            <arg value="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE.TEMP}"/>
            <arg line="--preserve-comments"/>
            <arg line="--no-compact"/>
            <arg line="--save-baseline"/>
            <arg line="--baseline-file"/>
            <arg value="${CODE.COVERAGE.REPORT.DIR}/coverage-baseline.json"/>
        </exec>
    </target>

    <!-- Step 3: parse all the instrumented code from the temp instrumented workspace and save the modified instrumented file into the instrumented workspace-->
    <target name="code_coverage_fix_instrumented_workspace_for_servoy">
        <echo level="verbose" message="Processing instrumented code from ${CODE.COVERAGE.INSTRUMENTED.WORKSPACE.TEMP} to ${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}, fixing Servoy incompatibilities"/>
        <exec executable="node" dir="${WORKSPACE}" failonerror="true">
            <arg value="${LIB-DIR}/servoyCodeCoverageInstrumentationFixer.js"/>
            <arg value="--d"/>
            <arg value="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}"/>
            <arg value="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE.TEMP}"/>
            <arg value="--tsp"/>
            <arg value="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}/${SERVOY.TEST-SOLUTION}"/>
            <arg value="--rp"/>
            <arg value="${CODE.COVERAGE.REPORT.DIR}"/>
            <arg value="--i"/>
            <arg value="${CODE.COVERAGE.INSTRUMENTED.INCLUDE}"/>
            <arg value="--x"/>
            <arg value="${CODE.COVERAGE.INSTRUMENTED.EXCLUDE}"/>
            <arg value="--e"/>
            <arg value="true"/>
            <arg value="--v"/>
            <arg value="false"/>
        </exec>
    </target>

    <!-- Generate Code Coverage reports after the tests have run -->
    <target name="generate_code_coverage_reports">
        <if>
            <isfalse value="${TEST.FAILED}" />
            <then>
                <for list="${CODE.COVERAGE.REPORT-FORMATS}" param="format">
                    <sequential>
                        <exec executable="${OS.COMMAND.EXECUTER}" dir="${WORKSPACE}" failonerror="true">
                            <arg value="${OS.COMMAND.CALL}" />
                            <arg value="istanbul report" />
                            <arg value="--root" />
                            <arg value="${WORKSPACE}/${CODE.COVERAGE.REPORT.DIR}" />
                            <arg value="--dir" />
                            <arg value="${CODE.COVERAGE.INSTRUMENTED.WORKSPACE}" />
                            <arg value="@{format}" />
                        </exec>
                    </sequential>
                </for>
            </then>
        </if>
    </target>

    <!-- Install istanbul -->
    <target name="install_istanbul">
        <if>
            <istrue value="${INSTALL_SOFTWARE_FROM_SCRIPT}"/>
            <then>
                <exec executable="${OS.COMMAND.EXECUTER}" dir="${WORKSPACE}" failonerror="true">
                    <arg value="${OS.COMMAND.CALL}" />
                    <arg value="npm install --prefix ${TOOLS-DIR} istanbul" />
                </exec>
            </then>
            <else>
                <echo level="info" message="Install of software disabled from config, will use manual install of ISTANBUL" />
            </else>
        </if>
        <echo level="info" message="Install UUID in lib dir, needed because global ref is not workingL" />
        <exec executable="${OS.COMMAND.EXECUTER}" dir="${WORKSPACE}" failonerror="true">
            <arg value="${OS.COMMAND.CALL}npm install --prefix ${LIB-DIR} uuid"/>
        </exec>
    </target>

</project>
