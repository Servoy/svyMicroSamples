<?xml version="1.0"?>

<!-- Works with Ant 1.7.0 and higher -->
<project basedir=".">
    <!-- Step 1: clean the instrumented workspace -->
    <target name="code_coverage_reporting_preparation" depends="install_istanbul">

            <make-clean-dir dir="${code.coverage.instrumented.dir.temp}" />
            <make-clean-dir dir="${code.coverage.outputDir}" />
            <make-clean-dir dir="${code.coverage.instrumented.dir}" />
            <copy todir="${code.coverage.instrumented.dir}">
                <fileset dir="${WORKSPACE}" />
            </copy>

            <copy todir="${code.coverage.instrumented.dir}/${servoy.test_solution_name}">
                <fileset dir="${LIB-DIR}">
                    <include name="scopes.codeCoverageReporting.js" />
                </fileset>
                <globmapper from="scopes.codeCoverageReporting.js" to="codeCoverageReporting.js"/>
            </copy>
    </target>

    <!-- Step 2: instrument all code from workspace into the temp instrumented workspace-->
    <target name="code_coverage_instrument_workspace">
        <echo level="info" message="instrumenting ${servoy.solution_under_testing} into ${code.coverage.instrumented.dir.temp}"/>
        <exec executable="istanbul.cmd" dir="${TOOLS-DIR}" osfamily="windows" failonerror="${code.coverage.failOnError}">
            <arg value="instrument"/>
            <arg value="${WORKSPACE}\${servoy.solution_under_testing}"/>
            <arg value="--output"/>
            <arg value="${code.coverage.instrumented.dir.temp}/${servoy.solution_under_testing}"/>
            <arg value="--preserve-comments"/>
            <arg value="--no-compact"/>
            <arg value="--save-baseline"/>
            <arg value="--baseline-file"/>
            <arg value="${code.coverage.outputDir}/coverage-baseline.json"/>
        </exec>
        <exec executable="istanbul" dir="${TOOLS-DIR}" osfamily="unix" failonerror="${code.coverage.failOnError}">
            <arg value="instrument"/>
            <arg value="${WORKSPACE}\${servoy.solution_under_testing}"/>
            <arg value="--output"/>
            <arg value="${code.coverage.instrumented.dir.temp}/${servoy.solution_under_testing}"/>
            <arg value="--preserve-comments"/>
            <arg value="--no-compact"/>
            <arg value="--save-baseline"/>
            <arg value="--baseline-file"/>
            <arg value="${code.coverage.outputDir}/coverage-baseline.json"/>
        </exec>
    </target>

    <!-- Step 3: parse all the instrumented code from the temp instrumented workspace and save the modified instrumented file into the instrumented workspace-->
    <target name="code_coverage_fix_instrumented_workspace_for_servoy">
        <echo level="info" message="node ${LIB-DIR}/servoyCodeCoverageInstrumentationFixer.js --d ${code.coverage.instrumented.dir} ${code.coverage.instrumented.dir.temp} --tsp ${code.coverage.instrumented.dir}/${servoy.test_solution_name} --rp ${code.coverage.outputDir} --i ${code.coverage.instrument.include} --x ${code.coverage.instrument.exclude} --e ${code.coverage.failOnError} --v false" />
        <echo level="info" message="Processing instrumented code from ${code.coverage.instrumented.dir.temp} to ${code.coverage.instrumented.dir}, fixing Servoy incompatibilities"/>
        <exec executable="node" failonerror="${code.coverage.failOnError}">
            <arg value="${LIB-DIR}/servoyCodeCoverageInstrumentationFixer.js"/>
            <arg value="--d"/>
            <arg value="${code.coverage.instrumented.dir}"/>
            <arg value="${code.coverage.instrumented.dir.temp}"/>
            <arg value="--tsp"/>
            <arg value="${code.coverage.instrumented.dir}/${servoy.test_solution_name}"/>
            <arg value="--rp"/>
            <arg value="${code.coverage.outputDir}"/>
            <arg value="--i"/>
            <arg value="${code.coverage.instrument.include}"/>
            <arg value="--x"/>
            <arg value="${code.coverage.instrument.exclude}"/>
            <arg value="--e"/>
            <arg value="${code.coverage.failOnError}"/>
            <arg value="--v"/>
            <arg value="false"/>
        </exec>
    </target>

    <!-- Generate Code Coverage reports after the tests have run -->
    <target name="generate_code_coverage_reports" unless="test.failed">
        <for list="${code.coverage.report-formats}" param="format">
          <sequential>
            <echo level="info" message="Generating @{format} report"/>
            <exec executable="istanbul.cmd" dir="${TOOLS-DIR}" osfamily="windows" failonerror="${code.coverage.failOnError}">
                <arg value="report" />
                <arg value="--root" />
                <arg value="${code.coverage.outputDir}" />
                <arg value="--dir" />
                <arg value="${code.coverage.outputDir}" />
                <arg value="@{format}" />
            </exec>
            <exec executable="istanbul" dir="${TOOLS-DIR}" osfamily="unix" failonerror="${code.coverage.failOnError}">
                <arg value="report" />
                <arg value="--root" />
                <arg value="${code.coverage.outputDir}" />
                <arg value="--dir" />
                <arg value="${code.coverage.outputDir}" />
                <arg value="@{format}" />
            </exec>
          </sequential>
        </for>
    </target>

    <!-- Install istanbul -->
    <target name="install_istanbul">
        <exec executable="cmd" osfamily="windows" failonerror="true">
            <arg line="/c npm install --prefix ${TOOLS-DIR} istanbul -g" />
        </exec>
        <exec executable="bash" osfamily="unix" failonerror="true">
            <arg line="-c" />
            <arg value="npm install --prefix ${TOOLS-DIR} istanbul -g"/>
        </exec>
    </target>

</project>
